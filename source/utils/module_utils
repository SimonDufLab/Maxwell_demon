"""Useful classes/functions to manipulates haiku modules object"""

import haiku as hk


def build_models(layer_list, model_input):
    """ Take as input a list of haiku modules and return 2 different transform object:
    1) First is the typical model returning the outputs
    2) The other is the same model returning all activations values + output"""

    # Build the model that only return the outputs
    typical_model = hk.Sequential(layer_list)(model_input)

    # And the model that also return the activations
    class ModelAndActivations(hk.Module):
        def __init__(self):
            super().__init__()
            self.layers = layer_list

        def __call__(self, x):
            activations = []
            for layer in self.layers[-1]:  # Don't append final output in activations list
                x = layer(x)
                activations.append(x)
            x = self.layers[-1](x)
            return x, activations

    secondary_model = ModelAndActivations()(model_input)

    return hk.without_apply_rng(hk.transform(typical_model)), hk.without_apply_rng(hk.transform(secondary_model))
